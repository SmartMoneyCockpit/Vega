name: Vega Cockpit Automation

on:
  schedule:
    # Monitors every 15m (scripts self-limit to market windows)
    - cron: "*/15 * * * *"
    # NA Morning Report: 14:25 UTC ≈ 7:25 AM PT (Mon–Fri)
    - cron: "25 14 * * 1-5"
    # NA Midday Verdict: 19:00 UTC ≈ 12:00 PM PT (Mon–Fri)
    - cron: "0 19 * * 1-5"
    # NA End-of-Day Wrap: 20:00 UTC ≈ 1:00 PM PT (Mon–Fri)
    - cron: "0 20 * * 1-5"
    # APAC Afternoon Report: 01:00 UTC ≈ 6:00 PM PT (prev day)
    - cron: "0 1 * * *"
  workflow_dispatch:

# No overlapping runs
concurrency:
  group: vega-cockpit-automation
  cancel-in-progress: true

# Global env (available to every job)
env:
  TZ: ${{ secrets.TZ_PREF }}                 # e.g., America/Los_Angeles
  PYTHONUNBUFFERED: "1"
  # Map your existing secrets to SMTP_* so all mailers can read them
  SMTP_HOST:  ${{ secrets.SMTP_HOST }}
  SMTP_PORT:  ${{ secrets.SMTP_PORT }}       # "587" for STARTTLS, "465" for SSL
  SMTP_USER:  ${{ secrets.SMTP_USER }}
  SMTP_PASS:  ${{ secrets.SMTP_PASS }}
  SMTP_FROM:  ${{ secrets.EMAIL_FROM }}
  SMTP_TO:    ${{ secrets.EMAIL_TO }}

jobs:

  monitor:
    if: github.event.schedule == '*/15 * * * *' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    concurrency: { group: vega-monitor, cancel-in-progress: true }
    env:
      PYTHONPATH: ${{ github.workspace }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - run: pip install -r requirements-actions.txt

      - name: Restore watchdog state
        uses: actions/cache@v4
        with:
          path: .vega_state
          key: vega-watchdog-state

      - name: Run Volatility & Hedge Monitor
        env:
          TZ_PREF:     ${{ secrets.TZ_PREF }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          GIST_ID:     ${{ secrets.GIST_ID }}
          GIST_TOKEN:  ${{ secrets.GIST_TOKEN }}
          WATCH_STATE_DIR: ".vega_state"
          ALERT_COOLDOWN_MIN: "15"
          FORCE_ALERT: ${{ vars.FORCE_ALERT }}
          DEBUG:       ${{ vars.DEBUG }}
        run: python monitor_vol_hedge.py

      - name: Save watchdog state
        if: always()
        uses: actions/cache/save@v4
        with:
          path: .vega_state
          key: vega-watchdog-state

      # Per-job email on failure (inline, no imports)
      - name: Email on job failure
        if: ${{ failure() }}
        env:
          JOB_NAME: monitor
          RUN_URL:  https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          python - <<'PY'
          import os, smtplib, ssl
          from email.mime.text import MIMEText
          host, port = os.getenv("SMTP_HOST"), int(os.getenv("SMTP_PORT") or "587")
          user, pwd  = os.getenv("SMTP_USER"), os.getenv("SMTP_PASS")
          to, frm    = os.getenv("SMTP_TO"), os.getenv("SMTP_FROM")
          url        = os.getenv("RUN_URL")
          subject    = f"[Vega] Job '{os.getenv('JOB_NAME')}' FAILED"
          body       = f"One or more steps failed.\nRun: {url}\n"
          if not all([host, port, user, pwd, to, frm]):
              print("Email vars missing; skipping per-job failure email.")
              raise SystemExit(0)
          msg = MIMEText(body, _charset="utf-8")
          msg["Subject"], msg["From"], msg["To"] = subject, frm, to
          ctx = ssl.create_default_context()
          with smtplib.SMTP(host, port, timeout=20) as s:
              if port == 587:
                  s.starttls(context=ctx)
              s.login(user, pwd)
              s.sendmail(frm, [to], msg.as_string())
          print("Per-job failure email sent.")
          PY

  morning_report:
    if: github.event.schedule == '25 14 * * 1-5' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    concurrency: { group: vega-morning, cancel-in-progress: true }
    env:
      PYTHONPATH: ${{ github.workspace }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - run: pip install -r requirements.txt
      - name: North American Morning Report
        env:
          TZ_PREF:     ${{ secrets.TZ_PREF }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
        run: python report_na.py

      - name: Email on job failure
        if: ${{ failure() }}
        env:
          JOB_NAME: morning_report
          RUN_URL:  https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          python - <<'PY'
          import os, smtplib, ssl
          from email.mime.text import MIMEText
          host, port = os.getenv("SMTP_HOST"), int(os.getenv("SMTP_PORT") or "587")
          user, pwd  = os.getenv("SMTP_USER"), os.getenv("SMTP_PASS")
          to, frm    = os.getenv("SMTP_TO"), os.getenv("SMTP_FROM")
          url        = os.getenv("RUN_URL")
          subject    = f"[Vega] Job '{os.getenv('JOB_NAME')}' FAILED"
          body       = f"One or more steps failed.\nRun: {url}\n"
          if not all([host, port, user, pwd, to, frm]):
              print("Email vars missing; skipping per-job failure email.")
              raise SystemExit(0)
          msg = MIMEText(body, _charset="utf-8")
          msg["Subject"], msg["From"], msg["To"] = subject, frm, to
          ctx = ssl.create_default_context()
          with smtplib.SMTP(host, port, timeout=20) as s:
              if port == 587:
                  s.starttls(context=ctx)
              s.login(user, pwd)
              s.sendmail(frm, [to], msg.as_string())
          print("Per-job failure email sent.")
          PY

  midday_report:
    if: github.event.schedule == '0 19 * * 1-5' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    concurrency: { group: vega-midday, cancel-in-progress: true }
    env:
      PYTHONPATH: ${{ github.workspace }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - run: pip install -r requirements-actions.txt
      - name: North American Midday Verdict
        env:
          TZ_PREF:     ${{ secrets.TZ_PREF }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
        run: python report_midday.py

      - name: Email on job failure
        if: ${{ failure() }}
        env:
          JOB_NAME: midday_report
          RUN_URL:  https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          python - <<'PY'
          import os, smtplib, ssl
          from email.mime.text import MIMEText
          host, port = os.getenv("SMTP_HOST"), int(os.getenv("SMTP_PORT") or "587")
          user, pwd  = os.getenv("SMTP_USER"), os.getenv("SMTP_PASS")
          to, frm    = os.getenv("SMTP_TO"), os.getenv("SMTP_FROM")
          url        = os.getenv("RUN_URL")
          subject    = f"[Vega] Job '{os.getenv('JOB_NAME')}' FAILED"
          body       = f"One or more steps failed.\nRun: {url}\n"
          if not all([host, port, user, pwd, to, frm]):
              print("Email vars missing; skipping per-job failure email.")
              raise SystemExit(0)
          msg = MIMEText(body, _charset="utf-8")
          msg["Subject"], msg["From"], msg["To"] = subject, frm, to
          ctx = ssl.create_default_context()
          with smtplib.SMTP(host, port, timeout=20) as s:
              if port == 587:
                  s.starttls(context=ctx)
              s.login(user, pwd)
              s.sendmail(frm, [to], msg.as_string())
          print("Per-job failure email sent.")
          PY

  eod_wrap:
    if: github.event.schedule == '0 20 * * 1-5' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    concurrency: { group: vega-eod, cancel-in-progress: true }
    env:
      PYTHONPATH: ${{ github.workspace }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - run: pip install -r requirements-actions.txt
      - name: North American End-of-Day Wrap
        env:
          TZ_PREF:     ${{ secrets.TZ_PREF }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
        run: python report_eod.py

      - name: Email on job failure
        if: ${{ failure() }}
        env:
          JOB_NAME: eod_wrap
          RUN_URL:  https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          python - <<'PY'
          import os, smtplib, ssl
          from email.mime.text import MIMEText
          host, port = os.getenv("SMTP_HOST"), int(os.getenv("SMTP_PORT") or "587")
          user, pwd  = os.getenv("SMTP_USER"), os.getenv("SMTP_PASS")
          to, frm    = os.getenv("SMTP_TO"), os.getenv("SMTP_FROM")
          url        = os.getenv("RUN_URL")
          subject    = f"[Vega] Job '{os.getenv('JOB_NAME')}' FAILED"
          body       = f"One or more steps failed.\nRun: {url}\n"
          if not all([host, port, user, pwd, to, frm]):
              print("Email vars missing; skipping per-job failure email.")
              raise SystemExit(0)
          msg = MIMEText(body, _charset="utf-8")
          msg["Subject"], msg["From"], msg["To"] = subject, frm, to
          ctx = ssl.create_default_context()
          with smtplib.SMTP(host, port, timeout=20) as s:
              if port == 587:
                  s.starttls(context=ctx)
              s.login(user, pwd)
              s.sendmail(frm, [to], msg.as_string())
          print("Per-job failure email sent.")
          PY

  apac_report:
    if: github.event.schedule == '0 1 * * *' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    concurrency: { group: vega-apac, cancel-in-progress: true }
    env:
      PYTHONPATH: ${{ github.workspace }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - run: pip install -r requirements.txt
      - name: Asia-Pacific Afternoon Report
        env:
          TZ_PREF:     ${{ secrets.TZ_PREF }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
        run: python report_apac.py

      - name: Email on job failure
        if: ${{ failure() }}
        env:
          JOB_NAME: apac_report
          RUN_URL:  https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          python - <<'PY'
          import os, smtplib, ssl
          from email.mime.text import MIMEText
          host, port = os.getenv("SMTP_HOST"), int(os.getenv("SMTP_PORT") or "587")
          user, pwd  = os.getenv("SMTP_USER"), os.getenv("SMTP_PASS")
          to, frm    = os.getenv("SMTP_TO"), os.getenv("SMTP_FROM")
          url        = os.getenv("RUN_URL")
          subject    = f"[Vega] Job '{os.getenv('JOB_NAME')}' FAILED"
          body       = f"One or more steps failed.\nRun: {url}\n"
          if not all([host, port, user, pwd, to, frm]):
              print("Email vars missing; skipping per-job failure email.")
              raise SystemExit(0)
          msg = MIMEText(body, _charset="utf-8")
          msg["Subject"], msg["From"], msg["To"] = subject, frm, to
          ctx = ssl.create_default_context()
          with smtplib.SMTP(host, port, timeout=20) as s:
              if port == 587:
                  s.starttls(context=ctx)
              s.login(user, pwd)
              s.sendmail(frm, [to], msg.as_string())
          print("Per-job failure email sent.")
          PY

  notify_failure:
    name: notify_failure
    needs: [monitor, morning_report, midday_report, eod_wrap, apac_report]
    if: ${{ failure() }}
    runs-on: ubuntu-latest
    steps:
      - name: Send aggregated failure email
        env:
          RUN_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          python - <<'PY'
          import os, smtplib, ssl
          from email.mime.text import MIMEText
          host, port = os.getenv("SMTP_HOST"), int(os.getenv("SMTP_PORT") or "587")
          user, pwd  = os.getenv("SMTP_USER"), os.getenv("SMTP_PASS")
          to, frm    = os.getenv("SMTP_TO"), os.getenv("SMTP_FROM")
          url        = os.getenv("RUN_URL")
          if not all([host, port, user, pwd, to, frm]):
              print("notify_failure: email vars missing; skipping.")
              raise SystemExit(0)
          subject = "[Vega] GitHub Actions FAILED (aggregate)"
          body    = f"One or more jobs failed.\nRun: {url}\n"
          msg = MIMEText(body, _charset="utf-8")
          msg["Subject"], msg["From"], msg["To"] = subject, frm, to
          ctx = ssl.create_default_context()
          with smtplib.SMTP(host, port, timeout=20) as s:
              if port == 587:
                  s.starttls(context=ctx)
              s.login(user, pwd)
              s.sendmail(frm, [to], msg.as_string())
          print("Aggregate failure email sent.")
          PY
