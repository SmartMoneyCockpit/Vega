name: Vega Cockpit Automation

on:
  schedule:
    # Monitors every 15m (scripts self-limit to market windows)
    - cron: "*/15 * * * *"
    # NA Morning Report: 14:25 UTC ≈ 7:25 AM PT (Mon–Fri)
    - cron: "25 14 * * 1-5"
    # NA Midday Verdict: 19:00 UTC ≈ 12:00 PM PT (Mon–Fri)
    - cron: "0 19 * * 1-5"
    # NA End-of-Day Wrap: 20:00 UTC ≈ 1:00 PM PT (Mon–Fri)
    - cron: "0 20 * * 1-5"
    # APAC Afternoon Report: 01:00 UTC ≈ 6:00 PM PT (prev day)
    - cron: "0 1 * * *"
  workflow_dispatch:

# Prevent overlapping runs from spamming
concurrency:
  group: vega-cockpit-automation
  cancel-in-progress: true

env:
  TZ: ${{ secrets.TZ_PREF }}   # e.g., America/Los_Angeles

jobs:

  monitor:
    if: github.event.schedule == '*/15 * * * *' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    concurrency: { group: vega-monitor, cancel-in-progress: true }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - run: pip install -r requirements-actions.txt

      - name: Restore watchdog state
        uses: actions/cache@v4
        with:
          path: .vega_state
          key: vega-watchdog-state

      - name: Run Volatility & Hedge Monitor
        env:
          TZ_PREF:     ${{ secrets.TZ_PREF }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          EMAIL_TO:    ${{ secrets.EMAIL_TO }}
          EMAIL_FROM:  ${{ secrets.EMAIL_FROM }}
          SMTP_HOST:   ${{ secrets.SMTP_HOST }}
          SMTP_PORT:   ${{ secrets.SMTP_PORT }}
          SMTP_USER:   ${{ secrets.SMTP_USER }}
          SMTP_PASS:   ${{ secrets.SMTP_PASS }}
          GIST_ID:     ${{ secrets.GIST_ID }}
          GIST_TOKEN:  ${{ secrets.GIST_TOKEN }}
          WATCH_STATE_DIR: ".vega_state"
          ALERT_COOLDOWN_MIN: "15"
        run: python monitor_vol_hedge.py

      - name: Save watchdog state
        if: always()
        uses: actions/cache/save@v4
        with:
          path: .vega_state
          key: vega-watchdog-state

  morning_report:
    if: github.event.schedule == '25 14 * * 1-5' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    concurrency: { group: vega-morning, cancel-in-progress: true }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - run: pip install -r requirements.txt
      - name: North American Morning Report
        env:
          TZ_PREF:     ${{ secrets.TZ_PREF }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          EMAIL_TO:    ${{ secrets.EMAIL_TO }}
          EMAIL_FROM:  ${{ secrets.EMAIL_FROM }}
          SMTP_HOST:   ${{ secrets.SMTP_HOST }}
          SMTP_PORT:   ${{ secrets.SMTP_PORT }}
          SMTP_USER:   ${{ secrets.SMTP_USER }}
          SMTP_PASS:   ${{ secrets.SMTP_PASS }}
        run: python report_na.py

  midday_report:
    if: github.event.schedule == '0 19 * * 1-5' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    concurrency: { group: vega-midday, cancel-in-progress: true }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - run: pip install -r requirements-actions.txt
      - name: North American Midday Verdict
        env:
          TZ_PREF:     ${{ secrets.TZ_PREF }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          EMAIL_TO:    ${{ secrets.EMAIL_TO }}
          EMAIL_FROM:  ${{ secrets.EMAIL_FROM }}
          SMTP_HOST:   ${{ secrets.SMTP_HOST }}
          SMTP_PORT:   ${{ secrets.SMTP_PORT }}
          SMTP_USER:   ${{ secrets.SMTP_USER }}
          SMTP_PASS:   ${{ secrets.SMTP_PASS }}
        run: python report_midday.py

  eod_wrap:
    if: github.event.schedule == '0 20 * * 1-5' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    concurrency: { group: vega-eod, cancel-in-progress: true }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - run: pip install -r requirements-actions.txt
      - name: North American End-of-Day Wrap
        env:
          TZ_PREF:     ${{ secrets.TZ_PREF }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          EMAIL_TO:    ${{ secrets.EMAIL_TO }}
          EMAIL_FROM:  ${{ secrets.EMAIL_FROM }}
          SMTP_HOST:   ${{ secrets.SMTP_HOST }}
          SMTP_PORT:   ${{ secrets.SMTP_PORT }}
          SMTP_USER:   ${{ secrets.SMTP_USER }}
          SMTP_PASS:   ${{ secrets.SMTP_PASS }}
        run: python report_eod.py

  apac_report:
    if: github.event.schedule == '0 1 * * *' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    concurrency: { group: vega-apac, cancel-in-progress: true }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - run: pip install -r requirements.txt
      - name: Asia-Pacific Afternoon Report
        env:
          TZ_PREF:     ${{ secrets.TZ_PREF }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          EMAIL_TO:    ${{ secrets.EMAIL_TO }}
          EMAIL_FROM:  ${{ secrets.EMAIL_FROM }}
          SMTP_HOST:   ${{ secrets.SMTP_HOST }}
          SMTP_PORT:   ${{ secrets.SMTP_PORT }}
          SMTP_USER:   ${{ secrets.SMTP_USER }}
          SMTP_PASS:   ${{ secrets.SMTP_PASS }}
        run: python report_apac.py

  notify_failure:
    needs: [monitor, morning_report, midday_report, eod_wrap, apac_report]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Send failure email
        env:
          EMAIL_TO:   ${{ secrets.EMAIL_TO }}
          EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
          SMTP_HOST:  ${{ secrets.SMTP_HOST }}
          SMTP_PORT:  ${{ secrets.SMTP_PORT }}
          SMTP_USER:  ${{ secrets.SMTP_USER }}
          SMTP_PASS:  ${{ secrets.SMTP_PASS }}
          RUN_URL:    https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          python - <<'PY'
          import os, smtplib
          from email.mime.text import MIMEText
          to, frm = os.environ["EMAIL_TO"], os.environ["EMAIL_FROM"]
          url = os.environ["RUN_URL"]
          body = f"⚠️ Vega GitHub Actions: a job failed\n\nCheck logs: {url}\n"
          msg = MIMEText(body)
          msg["Subject"] = "⚠️ Vega Actions: job failure"
          msg["From"] = frm
          msg["To"] = to
          with smtplib.SMTP(os.environ["SMTP_HOST"], int(os.environ.get("SMTP_PORT","587"))) as s:
            s.starttls(); s.login(os.environ["SMTP_USER"], os.environ["SMTP_PASS"])
            s.sendmail(frm, [to], msg.as_string())
          PY
