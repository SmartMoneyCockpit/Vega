name: issue-to-alert-yaml
true:
  push:
    branches:
    - main
  workflow_dispatch: null
  issues:
    types:
    - opened
    - edited
    - labeled
permissions:
  contents: write
  issues: write
jobs:
  precheck:
    runs-on: ubuntu-latest
    outputs:
      ok: ${{ steps.p.outputs.ok }}
    steps:
    - uses: actions/checkout@v4
    - id: p
      uses: ./.github/actions/precheck
  write-file:
    if: ${{ (startsWith(github.event.issue.title, 'Alert YAML:') || contains(join(github.event.issue.labels.*.name,
      ','), 'alert-yaml')) && needs.precheck.outputs.ok == 'true' && github.ref ==
      'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
    - id: parse
      uses: actions/github-script@v7
      with:
        script: 'const body = context.payload.issue.body || '''';

          const fileMatch = body.match(/^\s*filename:\s*([^\s]+\.ya?ml)\s*$/mi);

          if (!fileMatch) core.setFailed(''Missing `filename:` line (e.g., `filename:
          config/alerts/na-2025-08-25.yaml`).'');

          const path = fileMatch[1].trim();

          if (!/^config\/alerts\/.+\.ya?ml$/i.test(path)) core.setFailed(''`filename:`
          must be under config/alerts/ and end with .yaml/.yml'');

          const code = body.match(/```(?:yaml|yml)\n([\s\S]*?)```/i);

          if (!code) core.setFailed(''Wrap your YAML in a fenced block: ```yaml ...
          ```'');

          core.setOutput(''path'', path);

          core.setOutput(''yaml'', code[1].trim() + ''\n'');

          '
    - name: Write file via GitHub API
      uses: actions/github-script@v7
      with:
        script: "const owner = context.repo.owner, repo = context.repo.repo;\nconst\
          \ path = `${{ steps.parse.outputs.path }}`;\nconst yaml = `${{ steps.parse.outputs.yaml\
          \ }}`;\n\n// Fetch sha if file exists\nlet sha;\ntry {\n  const cur = await\
          \ github.rest.repos.getContent({ owner, repo, path, ref: 'main' });\n  if\
          \ (!Array.isArray(cur.data)) sha = cur.data.sha;\n} catch (e) {\n  if (e.status\
          \ !== 404) throw e;\n}\n\nconst content = Buffer.from(yaml, 'utf8').toString('base64');\n\
          const res = await github.rest.repos.createOrUpdateFileContents({\n  owner,\
          \ repo, path, content, sha, branch: 'main',\n  message: `chore(alerts):\
          \ update ${path} from Issue #${context.payload.issue.number}`\n});\n\nawait\
          \ github.rest.issues.createComment({\n  owner, repo, issue_number: context.payload.issue.number,\n\
          \  body: `\u2705 Wrote **${path}** \u2192 ${res.data.content.html_url}`\n\
          });\n"
    needs: precheck
