name: issue-to-alert-yaml
on:
  issues:
    types: [opened, edited, labeled]

permissions:
  contents: write     # commit the file
  issues: write       # comment on the issue

jobs:
  write-file:
    # Run only if the Issue is clearly intended for this workflow:
    if: startsWith(github.event.issue.title, 'Alert YAML:') || contains(join(github.event.issue.labels.*.name, ','), 'alert-yaml')
    runs-on: ubuntu-latest
    steps:
      - name: Extract YAML + filename from issue body
        id: parse
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.issue.body || ''
            // Require a line like:  filename: config/alerts/na-2025-08-25.yaml
            const fileMatch = body.match(/^\s*filename:\s*([^\s]+\.ya?ml)\s*$/mi)
            if (!fileMatch) core.setFailed('Missing `filename:` line. Add `filename: config/alerts/<name>.yaml` at the top of the Issue.')
            const rawPath = fileMatch[1].trim()

            // Basic safety: force path to stay under config/alerts/
            if (!/^config\/alerts\/.+\.ya?ml$/i.test(rawPath)) {
              core.setFailed('`filename:` must start with config/alerts/ and end with .yaml or .yml')
            }

            // Grab the FIRST fenced code block marked yaml|yml
            const codeMatch = body.match(/```(?:yaml|yml)\n([\s\S]*?)```/i)
            if (!codeMatch) core.setFailed('No YAML code block found. Wrap your content in ```yaml ... ```')
            const yaml = codeMatch[1].trim() + '\n'

            core.setOutput('path', rawPath)
            core.setOutput('yaml', yaml)

      - name: Write file via GitHub API
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const path = core.getInput('path', { required: true })
            const yaml = core.getInput('yaml', { required: true })
            const owner = context.repo.owner
            const repo  = context.repo.repo

            // Check if file exists to fetch sha for update
            let sha = undefined
            try {
              const cur = await github.rest.repos.getContent({ owner, repo, path, ref: 'main' })
              if (Array.isArray(cur.data)) throw new Error('Path is a directory')
              sha = cur.data.sha
            } catch (e) {
              if (e.status !== 404) throw e
            }

            const content = Buffer.from(yaml, 'utf8').toString('base64')
            const res = await github.rest.repos.createOrUpdateFileContents({
              owner, repo, path,
              message: `chore(alerts): update ${path} from Issue #${context.payload.issue.number}`,
              content, sha, branch: 'main'
            })

            // Comment back with the commit link
            const url = res.data.content.html_url
            await github.rest.issues.createComment({
              owner, repo, issue_number: context.payload.issue.number,
              body: `✅ Wrote **${path}** → ${url}`
            })
        with:
          path: ${{ steps.parse.outputs.path }}
          yaml: ${{ steps.parse.outputs.yaml }}
