name: issue-to-files
on:
  push:
    branches: [ main ]

  workflow_dispatch:

  issues:
    types: [opened, edited, labeled]

permissions:
  contents: write
  issues: write

jobs:
  write-files:
    if: startsWith(github.event.issue.title, 'Files Drop:') || contains(join(github.event.issue.labels.*.name, ','), 'files-drop')
    runs-on: ubuntu-latest
    steps:
      - id: parse
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.issue.body || '';
            // Match blocks like: ```file:path/to/file.ext\n<content>\n```
            const re = /```file:([^\n]+)\n([\s\S]*?)```/g;
            const files = [];
            let m;
            while ((m = re.exec(body)) !== null) {
              const path = m[1].trim();
              const content = m[2];
              // Safety: keep writes inside these roots
              const allowed = [
                /^config\//i,
                /^modules\//i,
                /^utils\//i,
                /^journal\//i,
                /^\.github\/workflows\//i,
                /^\.github\/ISSUE_TEMPLATE\//i
              ];
              if (!allowed.some(rx => rx.test(path))) {
                core.setFailed(`Path not allowed: ${path}`);
              }
              if (path.includes('..')) core.setFailed(`Disallowed relative climb in path: ${path}`);
              files.push({ path, content });
            }
            if (!files.length) core.setFailed("No ```file:<path> ...``` blocks found in the issue body.");
            core.setOutput('files', JSON.stringify(files));

      - name: Write each file
        id: write
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner, repo = context.repo.repo;
            const files = JSON.parse(core.getInput('files'));
            const links = [];
            for (const f of files) {
              let sha;
              try {
                const cur = await github.rest.repos.getContent({ owner, repo, path: f.path, ref: 'main' });
                if (!Array.isArray(cur.data)) sha = cur.data.sha;
              } catch (e) {
                if (e.status !== 404) throw e;
              }
              const content = Buffer.from(f.content, 'utf8').toString('base64');
              const res = await github.rest.repos.createOrUpdateFileContents({
                owner, repo, path: f.path, content, sha, branch: 'main',
                message: `chore(files-drop): update ${f.path} from Issue #${context.payload.issue.number}`
              });
              links.push(`- **${f.path}** → ${res.data.content.html_url}`);
            }
            core.setOutput('links', links.join('\n'));

      - name: Comment summary
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner, repo = context.repo.repo, num = context.payload.issue.number;
            const links = core.getInput('links') || '';
            await github.rest.issues.createComment({
              owner, repo, issue_number: num,
              body: `✅ Wrote files:\n${links}`
            });
