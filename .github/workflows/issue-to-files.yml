name: issue-to-files
true:
  push:
    branches:
    - main
  workflow_dispatch: null
  issues:
    types:
    - opened
    - edited
    - labeled
permissions:
  contents: write
  issues: write
jobs:
  precheck:
    runs-on: ubuntu-latest
    outputs:
      ok: ${{ steps.p.outputs.ok }}
    steps:
    - uses: actions/checkout@v4
    - id: p
      uses: ./.github/actions/precheck
  write-files:
    if: ${{ (startsWith(github.event.issue.title, 'Files Drop:') || contains(join(github.event.issue.labels.*.name,
      ','), 'files-drop')) && needs.precheck.outputs.ok == 'true' && github.ref ==
      'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
    - id: parse
      uses: actions/github-script@v7
      with:
        script: "const body = context.payload.issue.body || '';\n// Match blocks like:\
          \ ```file:path/to/file.ext\\n<content>\\n```\nconst re = /```file:([^\\\
          n]+)\\n([\\s\\S]*?)```/g;\nconst files = [];\nlet m;\nwhile ((m = re.exec(body))\
          \ !== null) {\n  const path = m[1].trim();\n  const content = m[2];\n  //\
          \ Safety: keep writes inside these roots\n  const allowed = [\n    /^config\\\
          //i,\n    /^modules\\//i,\n    /^utils\\//i,\n    /^journal\\//i,\n    /^\\\
          .github\\/workflows\\//i,\n    /^\\.github\\/ISSUE_TEMPLATE\\//i\n  ];\n\
          \  if (!allowed.some(rx => rx.test(path))) {\n    core.setFailed(`Path not\
          \ allowed: ${path}`);\n  }\n  if (path.includes('..')) core.setFailed(`Disallowed\
          \ relative climb in path: ${path}`);\n  files.push({ path, content });\n\
          }\nif (!files.length) core.setFailed(\"No ```file:<path> ...``` blocks found\
          \ in the issue body.\");\ncore.setOutput('files', JSON.stringify(files));\n"
    - name: Write each file
      id: write
      uses: actions/github-script@v7
      with:
        script: "const owner = context.repo.owner, repo = context.repo.repo;\nconst\
          \ files = JSON.parse(core.getInput('files'));\nconst links = [];\nfor (const\
          \ f of files) {\n  let sha;\n  try {\n    const cur = await github.rest.repos.getContent({\
          \ owner, repo, path: f.path, ref: 'main' });\n    if (!Array.isArray(cur.data))\
          \ sha = cur.data.sha;\n  } catch (e) {\n    if (e.status !== 404) throw\
          \ e;\n  }\n  const content = Buffer.from(f.content, 'utf8').toString('base64');\n\
          \  const res = await github.rest.repos.createOrUpdateFileContents({\n  \
          \  owner, repo, path: f.path, content, sha, branch: 'main',\n    message:\
          \ `chore(files-drop): update ${f.path} from Issue #${context.payload.issue.number}`\n\
          \  });\n  links.push(`- **${f.path}** \u2192 ${res.data.content.html_url}`);\n\
          }\ncore.setOutput('links', links.join('\\n'));\n"
    - name: Comment summary
      uses: actions/github-script@v7
      with:
        script: "const owner = context.repo.owner, repo = context.repo.repo, num =\
          \ context.payload.issue.number;\nconst links = core.getInput('links') ||\
          \ '';\nawait github.rest.issues.createComment({\n  owner, repo, issue_number:\
          \ num,\n  body: `\u2705 Wrote files:\\n${links}`\n});\n"
    needs: precheck
