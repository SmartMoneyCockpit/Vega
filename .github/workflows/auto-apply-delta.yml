name: Auto-Apply Vega Delta

on:
  push:
    paths:
      - 'drops/**/*.zip'
      - 'drops/**/*.txt'
  workflow_dispatch:
    inputs:
      zip:
        description: 'Optional: drops/<file>.zip'
        required: false
      delete_list:
        description: 'Optional: drops/<file>.txt'
        required: false

jobs:
  apply:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Resolve latest ZIP
        id: resolve
        shell: bash
        run: |
          set -euo pipefail
          ZIP="${{ github.event.inputs.zip }}"
          TXT="${{ github.event.inputs.delete_list }}"
          if [ -z "$ZIP" ]; then
            ZIP=$(ls -1t drops/*.zip 2>/dev/null | head -n 1 || true)
          fi
          if [ -z "$ZIP" ]; then
            echo "No delta zip found in drops/"; exit 1
          fi
          echo "zip=$ZIP" >> "$GITHUB_OUTPUT"
          if [ -z "$TXT" ]; then
            TXT=$(ls -1t drops/*.txt 2>/dev/null | head -n 1 || true)
          fi
          echo "txt=$TXT" >> "$GITHUB_OUTPUT"
          echo "Using ZIP: $ZIP"
          [ -n "$TXT" ] && echo "Using TXT: $TXT" || echo "No delete list."

      - name: Mirror repo from delta
        shell: bash
        run: |
          set -euo pipefail
          python - << 'PY'
          import zipfile, os, shutil, pathlib
          repo = pathlib.Path(".").resolve()
          delta = pathlib.Path("${{ steps.resolve.outputs.zip }}")
          # 1) Extract zip into a temp dir
          tmp = repo / "_delta_extract"
          if tmp.exists(): shutil.rmtree(tmp)
          tmp.mkdir()
          with zipfile.ZipFile(delta, "r") as z: z.extractall(tmp)
          # 2) Mirror: delete anything in repo root that is not in tmp
          def relset(root):
            out=set()
            for p in root.rglob("*"):
              if p.is_file():
                out.add(p.relative_to(root).as_posix())
            return out
          src = relset(tmp)
          dst = relset(repo)
          # prune git internals & drops
          dst = {p for p in dst if not (p.startswith(".git/") or p.startswith("drops/") or p.startswith(".github/"))}
          # delete extras
          for p in sorted(dst - src):
            target = repo / p
            target.parent.mkdir(parents=True, exist_ok=True)
            try:
              target.unlink()
            except IsADirectoryError:
              shutil.rmtree(target, ignore_errors=True)
          # 3) copy/overwrite from tmp -> repo
          for p in sorted(src):
            srcp = tmp / p; dstp = repo / p
            dstp.parent.mkdir(parents=True, exist_ok=True)
            shutil.copy2(srcp, dstp)
          PY

      - name: Optional delete list
        if: ${{ steps.resolve.outputs.txt != ''
