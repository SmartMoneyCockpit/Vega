name: weekly-module-drop
on:
  push:
    branches: [ main ]

  schedule:
    - cron: "0 15 * * 1"   # Mondays 08:00 America/Mazatlan (UTC-7)
  workflow_dispatch:

permissions:
  contents: write
  issues: write

jobs:
  open-next-module:
    runs-on: ubuntu-latest
    steps:
      - name: Determine next module to open
        id: pick
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner, repo = context.repo.repo;
            // Read the queue (order) and state (done)
            async function read(path, fallback) {
              try {
                const r = await github.rest.repos.getContent({ owner, repo, path, ref: 'main' });
                const txt = Buffer.from(r.data.content, 'base64').toString('utf8');
                return JSON.parse(txt);
              } catch (e) { if (e.status === 404) return fallback; throw e; }
            }

            const queue = await read('config/module_drops/queue.json', {
              order: ['week1.md','week2.md','week3.md','week4.md'], done: []
            });
            const done = new Set(queue.done || []);
            const next = (queue.order || []).find(f => !done.has(f));
            if (!next) {
              core.notice('All weekly module drops are already opened.');
              core.setOutput('skip', 'true');
              return;
            }

            // Fetch the issue body file
            const bodyFile = await github.rest.repos.getContent({ owner, repo, path: `config/module_drops/${next}`, ref: 'main' });
            const body = Buffer.from(bodyFile.data.content, 'base64').toString('utf8');

            // Create the issue if not already open
            const title = `Weekly Module Update â€” ${next.replace('.md','').toUpperCase()}`;
            await github.rest.issues.create({
              owner, repo, title,
              body, labels: ['module-drop']
            });

            // Update state
            queue.done = Array.from(new Set([...done, next]));
            const content = Buffer.from(JSON.stringify(queue, null, 2), 'utf8').toString('base64');
            // Upsert queue.json
            let sha; try {
              const cur = await github.rest.repos.getContent({ owner, repo, path: 'config/module_drops/queue.json', ref: 'main' });
              if (!Array.isArray(cur.data)) sha = cur.data.sha;
            } catch(e) { if (e.status !== 404) throw e; }
            await github.rest.repos.createOrUpdateFileContents({
              owner, repo, path: 'config/module_drops/queue.json', branch: 'main', content,
              message: `chore(modules): mark ${next} as opened`, sha
            });

            core.setOutput('skip', 'false');
      - name: Done
        if: steps.pick.outputs.skip == 'true'
        run: echo "No module to open this week."
