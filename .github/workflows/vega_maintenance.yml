name: Vega Maintenance & Config Check
true:
  push:
    branches:
    - main
  schedule:
  - cron: 0 7 * * 1
  workflow_dispatch: null
concurrency:
  group: vega-maintenance
  cancel-in-progress: true
jobs:
  precheck:
    runs-on: ubuntu-latest
    outputs:
      ok: ${{ steps.p.outputs.ok }}
    steps:
    - uses: actions/checkout@v4
    - id: p
      uses: ./.github/actions/precheck
  cleanup:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - name: Prune common caches/logs (runner-local)
      run: "echo \"Cleaning pip cache\u2026\"\nrm -rf ~/.cache/pip || true\necho \"\
        Listing large logs (if any)\u2026\"\nsudo find /var/log -type f -size +50M\
        \ -print || true\necho \"Done.\"\n"
    needs: precheck
    if: ${{ needs.precheck.outputs.ok == 'true' && github.ref == 'refs/heads/main'
      }}
  config_check:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      EMAIL_TO: ${{ secrets.EMAIL_TO }}
      EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
      SMTP_HOST: ${{ secrets.SMTP_HOST }}
      SMTP_PORT: ${{ secrets.SMTP_PORT }}
      SMTP_USER: ${{ secrets.SMTP_USER }}
      SMTP_PASS: ${{ secrets.SMTP_PASS }}
      WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
      GIST_ID: ${{ secrets.GIST_ID }}
      GIST_TOKEN: ${{ secrets.GIST_TOKEN }}
      TZ_PREF: ${{ secrets.TZ_PREF }}
      FORCE_ALERT: ${{ vars.FORCE_ALERT }}
      DEBUG: ${{ vars.DEBUG }}
    steps:
    - name: Verify required settings are present (no secrets shown)
      run: "py() {\n  python - <<'PY'\nimport os, sys\nkeys = [\n  (\"TZ_PREF\", True),\n\
        \  (\"EMAIL_TO\", True), (\"EMAIL_FROM\", True),\n  (\"SMTP_HOST\", True),\
        \ (\"SMTP_PORT\", True),\n  (\"SMTP_USER\", True), (\"SMTP_PASS\", True),\n\
        ]\noptional = [\n  \"WEBHOOK_URL\", \"GIST_ID\", \"GIST_TOKEN\",\n  \"FORCE_ALERT\"\
        , \"DEBUG\"\n]\nmissing = []\nfor k, required in keys:\n  if not os.getenv(k):\n\
        \    missing.append(k)\nprint(\"=== Vega config check ===\")\nfor k, _ in\
        \ keys:\n  print(f\"{k}: {'SET' if os.getenv(k) else 'MISSING'}\")\nfor k\
        \ in optional:\n  print(f\"{k}: {'SET' if os.getenv(k) else 'MISSING/DEFAULT'}\"\
        )\nif missing:\n  print(\"::warning::Missing required settings: \" + \", \"\
        .join(missing))\n  sys.exit(0)  # soft exit; still pass but warn\nPY\n}\n\
        py\n"
    needs: precheck
    if: ${{ needs.precheck.outputs.ok == 'true' && github.ref == 'refs/heads/main'
      }}
