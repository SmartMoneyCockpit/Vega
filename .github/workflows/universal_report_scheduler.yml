name: Universal Report Scheduler

on:
  workflow_call:
    inputs:
      region:
        description: 'NA | EU | APAC'
        required: false
        default: 'NA'
        type: string
      timezone:
        description: 'IANA timezone'
        required: false
        default: 'America/Los_Angeles'
        type: string
      enabled:
        description: 'Enable run'
        required: false
        default: 'true'
        type: string
      force_run:
        description: 'Bypass time gate'
        required: false
        default: 'false'
        type: string
      upload_artifacts:
        description: 'Upload artifacts'
        required: false
        default: 'true'
        type: string
  workflow_dispatch:
    inputs:
      region:
        description: 'NA | EU | APAC'
        required: false
        default: 'NA'
      timezone:
        description: 'IANA timezone'
        required: false
        default: 'America/Los_Angeles'
      enabled:
        description: 'Enable run'
        required: false
        default: 'true'
      force_run:
        description: 'Bypass time gate'
        required: false
        default: 'false'
      upload_artifacts:
        description: 'Upload artifacts'
        required: false
        default: 'true'
  push:
    branches: [ main ]
    paths:
      - 'scripts/**'
      - '.github/workflows/universal_report_scheduler.yml'

permissions:
  contents: read

concurrency:
  group: universal-report-scheduler-${{ inputs.region || github.event.inputs.region || 'NA' }}
  cancel-in-progress: true

jobs:
  precheck:
    if: ${{ (inputs.enabled || github.event.inputs.enabled || 'true') == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      region:     ${{ steps.vars.outputs.region }}
      region_lc:  ${{ steps.vars.outputs.region_lc }}
      timezone:   ${{ steps.vars.outputs.timezone }}
      force_run:  ${{ steps.vars.outputs.force_run }}
      upload:     ${{ steps.vars.outputs.upload }}
      window_ok:  ${{ steps.timegate.outputs.window_ok }}
    steps:
      - uses: actions/checkout@v4

      - id: vars
        shell: bash
        run: |
          REGION="${{ inputs.region || github.event.inputs.region || 'NA' }}"
          TZ="${{ inputs.timezone || github.event.inputs.timezone || 'America/Los_Angeles' }}"
          FORCE="${{ inputs.force_run || github.event.inputs.force_run || 'false' }}"
          UPLOAD="${{ inputs.upload_artifacts || github.event.inputs.upload_artifacts || 'true' }}"
          case "$REGION" in
            EU) RLC="europe" ;;
            NA) RLC="na" ;;
            APAC) RLC="apac" ;;
            *) RLC="$(echo "$REGION" | tr '[:upper:]' '[:lower:]')" ;;
          esac
          echo "region=$REGION"        >> "$GITHUB_OUTPUT"
          echo "region_lc=$RLC"        >> "$GITHUB_OUTPUT"
          echo "timezone=$TZ"          >> "$GITHUB_OUTPUT"
          echo "force_run=$FORCE"      >> "$GITHUB_OUTPUT"
          echo "upload=$UPLOAD"        >> "$GITHUB_OUTPUT"

      - id: timegate
        shell: bash
        env:
          FORCE: ${{ inputs.force_run || github.event.inputs.force_run || 'false' }}
          EVENT: ${{ github.event_name }}
        run: |
          if [ "$FORCE" = "true" ]; then
            echo "window_ok=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          if [ "$EVENT" = "workflow_dispatch" ] || [ "$EVENT" = "push" ] || [ "$EVENT" = "workflow_call" ]; then
            echo "window_ok=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "window_ok=true" >> "$GITHUB_OUTPUT"

  morning_report:
    needs: precheck
    if: ${{ needs.precheck.outputs.window_ok == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Run Morning Report (per-region)
        shell: bash
        run: |
          set -e
          RLC='${{ needs.precheck.outputs.region_lc }}'
          TZ='${{ needs.precheck.outputs.timezone }}'
          OUT="output/morning_report_${RLC}.md"
          mkdir -p output

          # 1) Run per-region or fallback script
          if [[ -f "scripts/morning_report_${RLC}.py" ]]; then
            python "scripts/morning_report_${RLC}.py" --tz "${TZ}" --out "${OUT}" || true
          elif [[ -f "scripts/morning_report.py" ]]; then
            python scripts/morning_report.py --tz "${TZ}" --out "${OUT}" || true
          fi

          # 2) Normalize from common alt locations if OUT missing
          if [[ ! -s "${OUT}" ]]; then
            for CAND in \
              "reports/morning_report_${RLC}.md" \
              "reports/${RLC}/morning_report.md" \
              "reports/morning_report.md" \
              "output/morning_report.md" ; do
              [[ -s "${CAND}" ]] && { cp -f "${CAND}" "${OUT}"; break; }
            done
          fi

          # 3) Guaranteed placeholder
          [[ -s "${OUT}" ]] || echo "# Morning Report ${{ needs.precheck.outputs.region }} (placeholder)" > "${OUT}"

      - name: Upload Morning Report
        if: ${{ needs.precheck.outputs.upload == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: morning-report-${{ needs.precheck.outputs.region }}
          path: output/morning_report_${{ needs.precheck.outputs.region_lc }}.md
          retention-days: 14
          compression-level: 6

  color_guard:
    needs: precheck
    if: ${{ needs.precheck.outputs.window_ok == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Run Color Guard (per-region)
        shell: bash
        run: |
          set -e
          RLC='${{ needs.precheck.outputs.region_lc }}'
          mkdir -p alerts output/color_guard

          # 1) Run per-region or fallback script
          if [[ -f "scripts/color_guard_${RLC}.py" ]]; then
            python "scripts/color_guard_${RLC}.py" || true
          elif [[ -f "scripts/color_guard.py" ]]; then
            python scripts/color_guard.py || true
          fi

          # 2) Normalize to alerts/color_guard_<region>.json
          OUT="alerts/color_guard_${RLC}.json"
          if [[ ! -s "${OUT}" ]]; then
            for CAND in \
              "guards/color_guard_${RLC}.json" \
              "output/color_guard/color_guard_${RLC}.json" \
              "output/color_guard.json" ; do
              [[ -s "${CAND}" ]] && { cp -f "${CAND}" "${OUT}"; break; }
            done
          fi

          # 3) Guaranteed placeholder
          [[ -s "${OUT}" ]] || echo '{"region":"${{ needs.precheck.outputs.region }}","status":"ok","note":"placeholder"}' > "${OUT}"

      - name: Upload Color Guard
        if: ${{ needs.precheck.outputs.upload == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: color-guard-${{ needs.precheck.outputs.region }}
          path: |
            output/color_guard/**
            alerts/color_guard_${{ needs.precheck.outputs.region_lc }}.json
          retention-days: 14
          compression-level: 6

  econ_calendar:
    needs: precheck
    if: ${{ needs.precheck.outputs.window_ok == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Run Econ Calendar (per-region)
        shell: bash
        run: |
          set -e
          RLC='${{ needs.precheck.outputs.region_lc }}'
          TZ='${{ needs.precheck.outputs.timezone }}'
          mkdir -p assets output/econ_calendar

          # 1) Run per-region or fallback script
          if [[ -f "scripts/econ_calendar_${RLC}.py" ]]; then
            python "scripts/econ_calendar_${RLC}.py" || true
          elif [[ -f "scripts/econ_calendar.py" ]]; then
            python scripts/econ_calendar.py || true
          fi

          # 2) Normalize to assets/econ_calendar_<region>.csv
          OUT="assets/econ_calendar_${RLC}.csv"
          if [[ ! -s "${OUT}" ]]; then
            for CAND in \
              "reports/econ_calendar_${RLC}.csv" \
              "reports/${RLC}/econ_calendar.csv" \
              "output/econ_calendar/econ_calendar_${RLC}.csv" ; do
              [[ -s "${CAND}" ]] && { cp -f "${CAND}" "${OUT}"; break; }
            done
          fi

          # 3) Guaranteed placeholder
          if [[ ! -s "${OUT}" ]]; then
            echo "date,time_tz,region,event,impact" > "${OUT}"
            echo "$(date +%F),08:30,${TZ},Placeholder,–" >> "${OUT}"
          fi

          # convenience copy into output/ as well
          cp -f "${OUT}" "output/econ_calendar/" 2>/dev/null || true

      - name: Upload Econ Calendar
        if: ${{ needs.precheck.outputs.upload == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: econ-calendar-${{ needs.precheck.outputs.region }}
          path: |
            output/econ_calendar/**
            assets/econ_calendar_${{ needs.precheck.outputs.region_lc }}.csv
          retention-days: 14
          compression-level: 6

  uptime_ping:
    needs: precheck
    if: ${{ needs.precheck.outputs.window_ok == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Run Uptime Ping
        run: |
          mkdir -p output/uptime_ping
          if [[ -f scripts/uptime_ping.py ]]; then
            python scripts/uptime_ping.py
          else
            echo "pong $(date -u +'%F %T')Z" > output/uptime_ping/ping.txt
          fi
      - name: Upload Uptime Ping
        if: ${{ needs.precheck.outputs.upload == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: uptime-ping-${{ needs.precheck.outputs.region }}
          path: output/uptime_ping/**
          retention-days: 14
          compression-level: 6

  package_region:
    needs: [morning_report, color_guard, econ_calendar, uptime_ping]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Create region zip
        run: |
          cd artifacts
          zip -r report_${{ needs.precheck.outputs.region }}.zip . || true
          mv report_${{ needs.precheck.outputs.region }}.zip ../
      - name: Upload region zip
        if: ${{ needs.precheck.outputs.upload == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: report-${{ needs.precheck.outputs.region }}
          path: report_${{ needs.precheck.outputs.region }}.zip
          retention-days: 14

  notify_on_success:
    needs: [package_region]
    if: ${{ success() }}
    runs-on: ubuntu-latest
    steps:
      - name: Send success email (SendGrid)
        env:
          SG_KEY: ${{ secrets.SENDGRID_API_KEY }}
          FROM:  ${{ vars.SENDGRID_FROM }}
          TO:    ${{ vars.SENDGRID_TO }}
          RUNURL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          REGION: ${{ needs.precheck.outputs.region }}
        run: |
          if [ -z "${SG_KEY:-}" ]; then
            echo "No SENDGRID_API_KEY; skipping success email."
            exit 0
          fi
          subj="✅ ${REGION} Report Scheduler succeeded"
          body=$(jq -n --arg s "$subj" \
                       --arg c "Artifacts available: report_${REGION}.zip (plus raw artifacts). Run: $RUNURL" \
                 '{personalizations:[{to:[{email:env.TO}]}],from:{email:env.FROM},subject:$s,content:[{type:"text/plain",value:$c}]}')
          curl -sS -X POST https://api.sendgrid.com/v3/mail/send \
            -H "Authorization: Bearer $SG_KEY" -H "Content-Type: application/json" \
            -d "$body"

  notify_on_fail:
    needs: [precheck, morning_report, color_guard, econ_calendar, uptime_ping]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Send failure email (SendGrid)
        env:
          SG_KEY: ${{ secrets.SENDGRID_API_KEY }}
          FROM:  ${{ vars.SENDGRID_FROM }}
          TO:    ${{ vars.SENDGRID_TO }}
          RUNURL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          REGION: ${{ needs.precheck.outputs.region }}
        run: |
          if [ -z "${SG_KEY:-}" ]; then
            echo "No SENDGRID_API_KEY; skipping failure email."
            exit 0
          fi
          subj="❌ ${REGION} Report Scheduler failed"
          body=$(jq -n --arg s "$subj" \
                       --arg c "See run: $RUNURL" \
                 '{personalizations:[{to:[{email:env.TO}]}],from:{email:env.FROM},subject:$s,content:[{type:"text/plain",value:$c}]}')
          curl -sS -X POST https://api.sendgrid.com/v3/mail/send \
            -H "Authorization: Bearer $SG_KEY" -H "Content-Type: application/json" \
            -d "$body"
