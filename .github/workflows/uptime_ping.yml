name: Uptime Ping

on:
  workflow_call:
    inputs:
      enabled: { type: string, required: false, default: 'true' }
      url:     { type: string, required: false, default: '' }
      method:  { type: string, required: false, default: 'GET' }
      expect:  { type: string, required: false, default: '' }   # empty = accept 2xx/3xx
    secrets:
      UPTIME_PING_URL: { required: false }

permissions: {}

jobs:
  build:
    if: ${{ inputs.enabled == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Resolve URL set (input, variables, secret)
        id: cfg
        shell: bash
        run: |
          set -u
          mkdir -p _uptime
          U_INPUT="${{ inputs.url }}"
          U_VAR1="${{ vars.UPTIME_URL }}"
          U_VARS="${{ vars.UPTIME_URLS }}"
          U_SECRET="${{ secrets.UPTIME_PING_URL }}"

          # Build list defensively; never fail this step
          {
            [ -n "${U_INPUT:-}"  ] && echo "$U_INPUT"
            [ -n "${U_VAR1:-}"   ] && echo "$U_VAR1"
            [ -n "${U_SECRET:-}" ] && echo "$U_SECRET"
            [ -n "${U_VARS:-}"   ] && printf "%s\n" "$U_VARS"
          } 2>/dev/null \
            | tr ',; ' '\n' \
            | sed 's/^[[:space:]]*//; s/[[:space:]]*$//' \
            | sed '/^$/d' \
            | sort -u > _uptime/urls.txt || true

          # If file missing for any reason, create empty
          [ -f _uptime/urls.txt ] || : > _uptime/urls.txt

          count="$(wc -l < _uptime/urls.txt 2>/dev/null | tr -d ' ' || echo 0)"
          if [ "$count" = "0" ]; then
            echo "has_urls=false" >> "$GITHUB_OUTPUT"
          else
            echo "has_urls=true"  >> "$GITHUB_OUTPUT"
            echo "count=$count"   >> "$GITHUB_OUTPUT"
          fi
        continue-on-error: true  # <- never fail the job here

      - name: No URLs provided — skipping politely
        if: ${{ steps.cfg.outputs.has_urls != 'true' }}
        run: echo "::notice title=Uptime Ping::No URLs found via input, variables, or secret. Skipping."

      - name: Ping all URLs (follow redirects; 2xx/3xx = OK unless 'expect' set)
        if: ${{ steps.cfg.outputs.has_urls == 'true' }}
        id: ping
        shell: bash
        env:
          METHOD: ${{ inputs.method }}
          EXPECT: ${{ inputs.expect }}
        run: |
          set -e
          echo "## Uptime Ping Results" >> "$GITHUB_STEP_SUMMARY"
          printf "| URL | Status | OK? |\n|---|---:|:---:|\n" >> "$GITHUB_STEP_SUMMARY"
          fail=0
          while IFS= read -r url; do
            [ -z "$url" ] && continue
            code=$(curl -L -s -o /dev/null -w "%{http_code}" -X "$METHOD" "$url" || echo "000")
            if [ -n "$EXPECT" ]; then
              ok=$([ "$code" = "$EXPECT" ] && echo "✅" || echo "❌")
            else
              case "$code" in 2*|3*) ok="✅" ;; *) ok="❌" ;; esac
            fi
            [ "$ok" = "❌" ] && fail=$((fail+1))
            printf "| %s | %s | %s |\n" "$url" "$code" "$ok" >> "$GITHUB_STEP_SUMMARY"
          done < _uptime/urls.txt
          if [ "$fail" -gt 0 ]; then
            echo "::error title=Uptime Ping::One or more checks failed ($fail failing)."
            exit 1
          fi
